'use strict';

import 'dotenv/config'
import express from 'express';
import http from 'http';
import { Server } from 'socket.io';
import * as url from 'url';
import path from 'path';
import bodyParser from 'body-parser';

import { Home, Reps, StylePage } from './views.js';
import { cl, getApiData, filterReps } from './serverUtils.js';

const PORT = 3050;
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));

const app = express();
const server = http.createServer(app);
const io = new Server(server); // socket.io server

app.use(bodyParser.json());
app.use(bodyParser.urlencoded( {extended: true} ));

/*
    Associate unique id generated by client to socket for
    use in [POST '/reps'] route below
*/
const sockets = {};
io.on('connection', function(socket) {

    socket.on('ratio_request', ratio_req_id => {
        sockets[ratio_req_id] = socket;
    });

    // Clean up the socket when it disconnects
    socket.on('disconnect', ratio_req_id => {
        delete sockets[ratio_req_id];
    });
});


/*
    Routes
*/

// Images
app.use('/images', express.static( path.join(__dirname, 'images') ))


// Home page
app.get('/', (req, res) => {
    try {
        res.send( Home() );
    } 
    catch (e) {
        console.log(`Home GET error: \n${e}`);
    }
});


// Representatives page
app.post('/reps', async (req, res) => {

    req.setTimeout(0);

    const address   = req.body.address;
    const city      = req.body.city;
    const state     = req.body.state;
    const zip       = req.body.zip;

    let repInterval = undefined;
    const ratio_req_id = req.body['ratio_id'];

    const fetchedRepImgsRatio = { 
        fetched: "_", 
        total: "_",  
        string: "_ / _"
    };

    // fetch Google Civic API info for address
    const repsData = await getApiData(address, city, state, zip);

    // filter out relevant data
    const filteredReps = await filterReps(repsData);

    // start updating rep image fetch ratio from Reps() call below on 
    // client's submission page every half second
    (async () => {
        repInterval = setInterval(() => {
            sockets[ratio_req_id].emit('ratioUpdated', fetchedRepImgsRatio.string);
        }, 500);
    })();

    // create reps page
    const repsPage = await Reps(filteredReps, fetchedRepImgsRatio);

    res.send( repsPage );

    // clean up interval, socket
    clearInterval(repInterval);
    sockets[ratio_req_id].emit('imagesFetched');
    sockets[ratio_req_id].disconnect(true);
    delete sockets[ratio_req_id];

    return;
});


// Full representatives page for styling (dev)
app.get('/rep-style', (req, res) => {
    try {
        res.send( StylePage() );
    } 
    catch (e) {
        console.log(`Home GET error: \n${e}`);
    }
});


server.listen(PORT, () => {
    console.log(`\nFetch reps server running on port http://127.0.0.1:${PORT}`);
})


